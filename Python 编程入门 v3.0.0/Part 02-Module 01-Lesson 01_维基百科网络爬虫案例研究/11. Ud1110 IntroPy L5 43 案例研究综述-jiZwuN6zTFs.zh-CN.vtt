WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.105
我们做到了 我们和你一起协作

00:00:05.105 --> 00:00:07.799
完成了我们的维基百科爬虫并使其运行

00:00:07.799 --> 00:00:09.414
回顾一下我们是如何做到的

00:00:09.414 --> 00:00:14.254
我们做的第一件事 尝试手动点击维基百科链接

00:00:14.255 --> 00:00:17.940
我们开始了解 想要程序实现的是什么

00:00:17.940 --> 00:00:19.620
接下来 我们学习了一些东西

00:00:19.620 --> 00:00:22.600
我们学习了输入数据 HTML 的结构

00:00:22.600 --> 00:00:26.005
研究了有用的 Python 包 帮助我们处理 HTML

00:00:26.004 --> 00:00:27.894
接下来 我们设计了一个程序

00:00:27.894 --> 00:00:29.864
但没有编写代码

00:00:29.864 --> 00:00:32.564
我们决定使用的循环种类

00:00:32.564 --> 00:00:34.304
需要的数据结构

00:00:34.304 --> 00:00:37.619
并决定我们将要执行的步骤及其顺序

00:00:37.619 --> 00:00:41.709
如果你正在与网络互动 还有一个特定的额外项很重要

00:00:41.710 --> 00:00:44.969
我们放慢了程序 避免其成为滋扰

00:00:44.969 --> 00:00:48.589
做完所有这些工作 我们才开始编写代码

00:00:48.590 --> 00:00:51.420
Charlie 写了一个控制 while 循环的 continue_crawl 函数

00:00:51.420 --> 00:00:54.020
并布置了 while 循环中的主要步骤

00:00:54.020 --> 00:00:59.145
在这个过程中 她最终规划了另一个函数 find_first_link

00:00:59.145 --> 00:01:01.125
她规定了该函数需要做的事

00:01:01.125 --> 00:01:03.179
但没有设定函数实际上的实现方式

00:01:03.179 --> 00:01:07.670
我是在 Charlie 的规范之后编写 find_first_link 函数的人

00:01:07.670 --> 00:01:09.489
同样 我也测试了代码 以确保其

00:01:09.489 --> 00:01:12.140
在各种维基百科页面上工作

00:01:12.140 --> 00:01:14.459
我迭代了我写的代码

00:01:14.459 --> 00:01:16.890
以使其在我发现的每个维基百科页面上工作

00:01:16.890 --> 00:01:19.560
你可以使用这些要点以及

00:01:19.560 --> 00:01:22.784
这个例子 可以对你下次编程有所帮助

00:01:22.784 --> 00:01:24.554
根据你在做的具体工作

00:01:24.555 --> 00:01:26.130
你可能需要更改顺序

00:01:26.129 --> 00:01:28.469
或多次重复某些步骤

00:01:28.469 --> 00:01:33.000
这些是你在编程时需要一遍遍重复的基础步骤

