WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.790
现在我们来找到文章中的第一个链接

00:00:02.790 --> 00:00:04.589
这可能是程序内要写的最棘手的一部分

00:00:04.589 --> 00:00:07.609
因为我目前也没有确定该怎么写

00:00:07.610 --> 00:00:09.480
很多程序员花大量时间

00:00:09.480 --> 00:00:14.429
在各种库或者像 StackOverflow 这样的论坛里寻找现有的结果

00:00:14.429 --> 00:00:17.414
但是编程真正的艺术和挑战

00:00:17.414 --> 00:00:19.585
是解决像现在这样的问题

00:00:19.585 --> 00:00:22.800
并且唯一解决问题的方法就是去尝试

00:00:22.800 --> 00:00:26.099
我将从浏览器开发工具中链接中找到第一个链接开始

00:00:26.099 --> 00:00:28.679
之后我会试着再用 BeautifulSoup 寻找一遍

00:00:28.679 --> 00:00:30.559
这儿有个随机找到的文章 是关于 

00:00:30.559 --> 00:00:34.109
Mr.McNeilly 它的第一个链接指向介绍 Ireland 的文章 

00:00:34.109 --> 00:00:37.164
我先用开发工具检查这个链接

00:00:37.164 --> 00:00:39.990
好的 这个链接在一个 a herf 标签里面

00:00:39.990 --> 00:00:42.270
这个标签在一个段落标签里

00:00:42.270 --> 00:00:44.390
该段落标签又在一个 div 标签里面

00:00:44.390 --> 00:00:48.884
这个 div 标签唯一 id 为 mw-content-text

00:00:48.884 --> 00:00:51.479
当我选中这个 div 我看到其包括

00:00:51.479 --> 00:00:56.069
文章的文本 但是没有包含 Wikipedia 的标志和菜单

00:00:56.070 --> 00:00:58.170
这看起来像是寻找链接的正确位置

00:00:58.170 --> 00:01:00.870
然后我将要试着用 BeautifulSoup 再来寻找一遍

00:01:00.869 --> 00:01:04.034
我先切换到命令行终端 并且打开 Python 编译器

00:01:04.034 --> 00:01:07.354
我使用编译器 这样以来我能高效率的尝试一些很多东西

00:01:07.355 --> 00:01:09.540
我很确定我在我能找到如何正确使用

00:01:09.540 --> 00:01:12.300
BeautifulSoup 之前 我就得做一个实验

00:01:12.299 --> 00:01:14.730
我还可以写一段实验性的程序

00:01:14.730 --> 00:01:17.520
然后每次更动之后运行它来验证它的正确性

00:01:17.519 --> 00:01:19.979
从我个人来说我更喜欢在交互模式下这种方式

00:01:19.980 --> 00:01:22.814
首先 先导入我们需要的库

00:01:22.814 --> 00:01:26.274
现在 我们先下载在浏览器看到的 McNeilly 的文章

00:01:26.275 --> 00:01:29.380
我要打印这段 html 来确认我得到的是想要的东西

00:01:29.379 --> 00:01:32.129
好的 正是我们的 Wikipedia 文章

00:01:32.129 --> 00:01:34.304
文本内容是关于 Mr. McNeilly 的

00:01:34.305 --> 00:01:38.690
我复查了一遍看看自己有没有犯错误或者下错了东西

00:01:38.689 --> 00:01:39.998
我现在就来确认一下

00:01:39.998 --> 00:01:43.030
而不是在调试程序的时候 那时将会更难检查

00:01:43.030 --> 00:01:45.855
现在 我把 html 传递给 BeautifulSoup

00:01:45.855 --> 00:01:49.085
先来找到 id 是 mw-content-text 的 div 标签

00:01:49.084 --> 00:01:51.138
为了能根据 id 找到标签

00:01:51.138 --> 00:01:54.674
我需要这样来使用 find 方法

00:01:54.674 --> 00:01:57.959
运行没有错误 很好

00:01:57.959 --> 00:01:59.934
现在 我要第一个 a herf 标签

00:01:59.935 --> 00:02:02.710
它在这个 div 标签内的第一个段落标签里

00:02:02.709 --> 00:02:04.959
我在键盘上按上箭头键

00:02:04.959 --> 00:02:07.089
这样我就会回到上一个命令 这样我就可以在上一个命令上

00:02:07.090 --> 00:02:11.680
直接连接更多的命令 完美

00:02:11.680 --> 00:02:14.855
这就是我们想要的指向 Ireland 文章的链接

00:02:14.854 --> 00:02:16.659
其实我只想要这个 url 链接

00:02:16.659 --> 00:02:18.490
而不是整个 a herf 标签

00:02:18.490 --> 00:02:20.086
我不知道怎么达成这个要求

00:02:20.086 --> 00:02:23.044
所以我来看看 BeautifulSoup 的文档

00:02:23.044 --> 00:02:27.385
哦 这和快速开始里面提到的情形一模一样

00:02:27.384 --> 00:02:30.625
看起来我要在 a herf 标签上就像在 Python 字典上那样使用 get 方法 

00:02:30.625 --> 00:02:36.120
然后再用 href 作为查询的键值 现在来试试

00:02:37.250 --> 00:02:43.935
真棒 我们的 url 现在已经没有附带多余的 html

00:02:43.935 --> 00:02:47.925
此时我们可以把这段代码粘贴进程序 然后直到某一天用到这段代码

00:02:47.925 --> 00:02:50.930
但是这么做的话 我们可不是个好的程序员

00:02:50.930 --> 00:02:52.909
好的程序员会测试他的代码

00:02:52.909 --> 00:02:57.433
我们只知道现在它对于这段特殊的文章是奏效的 怎么确定他对其他文章也奏效呢

00:02:57.433 --> 00:02:59.349
自己试试这段代码

00:02:59.349 --> 00:03:00.629
我会把这段 BeautifulSoup 代码

00:03:00.629 --> 00:03:03.229
放在下面 这样你可以把它粘贴进自己的命令行终端里面

