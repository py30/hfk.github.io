WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.790
Now it's time to find the first link in an article.

00:00:02.790 --> 00:00:04.589
This might be the trickiest part of the program to

00:00:04.589 --> 00:00:07.609
write because I'm not sure exactly how to write it yet.

00:00:07.610 --> 00:00:09.480
A lot of a programmer's time is spent looking for

00:00:09.480 --> 00:00:14.429
existing solutions either in libraries or in help forums like Stack Overflow.

00:00:14.429 --> 00:00:17.414
The real art of programming though and the real challenge,

00:00:17.414 --> 00:00:19.585
is solving new problems like this one.

00:00:19.585 --> 00:00:22.800
And the only way to solve unsolved problems is to try.

00:00:22.800 --> 00:00:26.099
I'll start by finding the first link with my browser's developer tools,

00:00:26.099 --> 00:00:28.679
then I'll try to find it again with BeautifulSoup.

00:00:28.679 --> 00:00:30.559
So here's a random article about a Mr.

00:00:30.559 --> 00:00:34.109
McNeilly and this first link is to the Ireland article.

00:00:34.109 --> 00:00:37.164
I'll inspect this link with the developer tools.

00:00:37.164 --> 00:00:39.990
Okay, so the link is in this anchor tag,

00:00:39.990 --> 00:00:42.270
which is inside this paragraph tag,

00:00:42.270 --> 00:00:44.390
which is inside this div tag.

00:00:44.390 --> 00:00:48.884
The div tag has the ID "mw- content-text".

00:00:48.884 --> 00:00:51.479
When I highlight this div I can see that it contains

00:00:51.479 --> 00:00:56.069
the article's text but not anything else like Wikipedia's logo or the menus.

00:00:56.070 --> 00:00:58.170
This seems like the right place to search for links,

00:00:58.170 --> 00:01:00.870
so I'll try to find it again with BeautifulSoup.

00:01:00.869 --> 00:01:04.034
Let's switch to a terminal and start the Python interpreter.

00:01:04.034 --> 00:01:07.354
I'm using the interpreter here so I can try out a lot of things quickly.

00:01:07.355 --> 00:01:09.540
I'm pretty sure I'll have to experiment for a while

00:01:09.540 --> 00:01:12.300
before I can figure out the right way to use BeautifulSoup.

00:01:12.299 --> 00:01:14.730
I could also experiment by writing a program and

00:01:14.730 --> 00:01:17.520
running it over and over again as I make changes to it.

00:01:17.519 --> 00:01:19.979
I prefer this interactive workflow though.

00:01:19.980 --> 00:01:22.814
First up, let's import the libraries we need.

00:01:22.814 --> 00:01:26.274
Now let's download the McNeilly article I'm looking at in my browser.

00:01:26.275 --> 00:01:29.380
I'll print this HTML to make sure we got the right thing.

00:01:29.379 --> 00:01:32.129
Good. This looks like the Wikipedia article.

00:01:32.129 --> 00:01:34.304
This text is about Mr. McNeilly.

00:01:34.305 --> 00:01:38.690
I double checked because if I had made a mistake or if I had downloaded the wrong thing,

00:01:38.689 --> 00:01:39.998
I want to know that now.

00:01:39.998 --> 00:01:43.030
Not later on when it'd harder to debug the problem.

00:01:43.030 --> 00:01:45.855
Now, I'll feed this HTML into BeautifulSoup.

00:01:45.855 --> 00:01:49.085
Let's find that mw-content-text div.

00:01:49.084 --> 00:01:51.138
In order to look up a tag by ID,

00:01:51.138 --> 00:01:54.674
I need to use the find method like this.

00:01:54.674 --> 00:01:57.959
No errors. This is good.

00:01:57.959 --> 00:01:59.934
Now, I'll look for the first anchor tag,

00:01:59.935 --> 00:02:02.710
inside of the first paragraph tag, inside of this div.

00:02:02.709 --> 00:02:04.959
I'll press the up arrow in my keyboard to

00:02:04.959 --> 00:02:07.089
bring back the last command I entered so I can chain

00:02:07.090 --> 00:02:11.680
more search terms onto the command. Oh, cool.

00:02:11.680 --> 00:02:14.855
This is the link to the Ireland article which is what we wanted.

00:02:14.854 --> 00:02:16.659
I really only want this URL though,

00:02:16.659 --> 00:02:18.490
not this whole anchor tag.

00:02:18.490 --> 00:02:20.086
I don't remember how to do that though,

00:02:20.086 --> 00:02:23.044
so I'll check BeautifulSoup's documentation.

00:02:23.044 --> 00:02:27.385
Oh, this exact situation is in the QuickStart section.

00:02:27.384 --> 00:02:30.625
It looks like I can use the get method on a tag as if it was a dictionary

00:02:30.625 --> 00:02:36.120
and I use "href" as the lookup key. Let's try that.

00:02:37.250 --> 00:02:43.935
Great! There is our URL now without any extra HTML around it.

00:02:43.935 --> 00:02:47.925
At this point we could paste this code snippet into the program and call it a day,

00:02:47.925 --> 00:02:50.930
but if we did that we would be bad programmers.

00:02:50.930 --> 00:02:52.909
Good programmers test their code.

00:02:52.909 --> 00:02:57.433
We know this works for this one particular article but does it work for every article?

00:02:57.433 --> 00:02:59.349
Try this code on your own to find out.

00:02:59.349 --> 00:03:00.629
I'll put this BeautifulSoup code

00:03:00.629 --> 00:03:03.229
below so you can copy and paste it into your own terminal.

