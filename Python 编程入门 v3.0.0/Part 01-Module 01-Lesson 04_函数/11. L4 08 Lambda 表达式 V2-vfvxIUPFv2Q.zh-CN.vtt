WEBVTT
Kind: captions
Language: zh-CN

00:00:02.649 --> 00:00:08.435
在 Python 中 你可以使用 lambda 表达式创建匿名函数

00:00:08.435 --> 00:00:12.040
即没有名称的函数

00:00:12.039 --> 00:00:13.849
lambda 表达式非常适合快速创建

00:00:13.849 --> 00:00:17.725
在代码中以后不会用到的函数

00:00:17.725 --> 00:00:23.025
稍后 我们将学习高阶函数 即将其他函数作为参数的函数

00:00:23.024 --> 00:00:28.469
这时候 lambda 表达式就变得非常有用

00:00:28.469 --> 00:00:33.804
我们来比较下函数的结构和 lambda 表达式的结构

00:00:33.804 --> 00:00:37.320
这是一个使数字翻倍的简单函数

00:00:37.320 --> 00:00:42.689
它接受一个数字 x 并返回 x * 2

00:00:42.689 --> 00:00:46.989
调用 double(3) 将返回 6

00:00:46.990 --> 00:00:50.079
这是对等的 lambda 表达式

00:00:50.079 --> 00:00:54.799
关键字 lambda 表示这是一个 lambda 表达式

00:00:54.799 --> 00:01:01.780
lambda 之后是该匿名函数的一个或多个参数 然后是一个英文冒号

00:01:01.780 --> 00:01:09.349
这两种方式是对等的 就像在函数中参数名称是任意的

00:01:09.349 --> 00:01:14.649
最后一部分是被评估并在该函数中返回的表达式

00:01:14.650 --> 00:01:19.670
和你可能会在函数中看到的 return 语句表达式很像

00:01:19.670 --> 00:01:24.795
鉴于这种结构 lambda 表达式不太适合复杂的函数

00:01:24.795 --> 00:01:28.900
但是非常适合简短的函数

00:01:28.900 --> 00:01:32.400
如果你想在 lambda 函数中指定多个参数

00:01:32.400 --> 00:01:37.260
可以在英文冒号前添加这些参数 并用英文逗号分隔

00:01:37.260 --> 00:01:41.210
这是一个将两个数字相乘的 lambda 函数

00:01:41.209 --> 00:01:43.229
在下面的练习中

00:01:43.230 --> 00:01:48.000
你将练习使用 lambda 函数并了解它们的用途

