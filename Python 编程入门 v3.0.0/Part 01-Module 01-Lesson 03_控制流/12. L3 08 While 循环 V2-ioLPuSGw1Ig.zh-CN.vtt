WEBVTT
Kind: captions
Language: zh-CN

00:00:01.470 --> 00:00:05.785
for 循环是一种有限迭代

00:00:05.785 --> 00:00:10.519
即循环主体的运行次数已提前定义好

00:00:10.519 --> 00:00:16.344
列表 for 循环会针对列表中的每个元素运行主体一次

00:00:16.344 --> 00:00:19.144
使用函数 range() 的 for 循环

00:00:19.144 --> 00:00:23.439
执行次数将由函数 range() 指定

00:00:23.440 --> 00:00:25.859
这与无限迭代不同

00:00:25.859 --> 00:00:29.364
即循环重复次数不定

00:00:29.364 --> 00:00:32.469
当满足某个条件时 循环结束

00:00:32.469 --> 00:00:37.780
看看这个 while 循环示例 该循环模拟的是一个二十一点庄家

00:00:37.780 --> 00:00:41.109
庄家会从一副牌中抽取纸牌放入玩家手中

00:00:41.109 --> 00:00:45.850
当玩家手中的牌点数之和是 17 点或更多时 停止抽牌

00:00:45.850 --> 00:00:48.070
这个示例用到了一个新的函数 sum()

00:00:48.070 --> 00:00:52.189
和一个新的列表方法 pop()

00:00:52.189 --> 00:00:53.789
sum() 很好理解

00:00:53.789 --> 00:00:57.024
它返回的是列表中的元素之和

00:00:57.024 --> 00:00:59.960
pop() 是方法 append() 的对立面

00:00:59.960 --> 00:01:03.789
它从列表中删除最后一个元素并返回该元素

00:01:03.789 --> 00:01:07.349
你可以在官方文档中了解更多详情

00:01:07.349 --> 00:01:10.399
这行代码的目的是计算列表 hand 中的元素之和

00:01:10.400 --> 00:01:15.205
并检查和是否小于或等于 17

00:01:15.204 --> 00:01:18.599
在这一行 我们从 card_deck 中拿出最后一个元素

00:01:18.599 --> 00:01:22.929
并将其附加到列表 hand 中

00:01:22.930 --> 00:01:25.720
我们看看这个 while 循环的原理

00:01:25.719 --> 00:01:30.519
关键字 while 表示这是一个 while 循环

00:01:30.519 --> 00:01:32.289
接下来是条件

00:01:32.290 --> 00:01:37.170
在此示例中 条件是 sum(hand) &lt;= 17

00:01:37.170 --> 00:01:39.125
如果该条件为 true

00:01:39.125 --> 00:01:41.650
则执行循环的主体部分

00:01:41.650 --> 00:01:44.145
每次运行循环的主体时

00:01:44.144 --> 00:01:47.159
都再次检查该条件

00:01:47.159 --> 00:01:50.039
这一检查条件然后运行循环的流程会不断重复

00:01:50.040 --> 00:01:54.050
直到该表达式变成 false

00:01:54.049 --> 00:02:00.060
循环的缩进主体部分应该至少修改测试表达式中的一个变量

00:02:00.060 --> 00:02:03.170
如果测试表达式的值始终不变

00:02:03.170 --> 00:02:05.385
循环将变成无限循环

00:02:05.385 --> 00:02:09.865
在此示例中 循环的主体会向列表 hand 中附加数字

00:02:09.865 --> 00:02:12.784
这样就会增加 sum(hand) 的值

00:02:12.784 --> 00:02:18.000
最终 sum(hand) 的值将变得足够大 使该条件变成 false

