WEBVTT
Kind: captions
Language: en

00:00:01.470 --> 00:00:05.785
For loops are an example of definite iteration

00:00:05.785 --> 00:00:10.519
meaning that the loop's body is run a predefined number of times.

00:00:10.519 --> 00:00:16.344
A for loop over a list executes the body once for each element in the list.

00:00:16.344 --> 00:00:19.144
A for loop using the range function will

00:00:19.144 --> 00:00:23.439
execute the number of times specified by the range function.

00:00:23.440 --> 00:00:25.859
This differs from indefinite iteration,

00:00:25.859 --> 00:00:29.364
which is when a loop repeats an unknown number of times,

00:00:29.364 --> 00:00:32.469
and ends when some condition is met.

00:00:32.469 --> 00:00:37.780
Consider this while loop that simulates a blackjack dealer by drawing cards from

00:00:37.780 --> 00:00:41.109
a deck list into a hand list stopping when

00:00:41.109 --> 00:00:45.850
the value of the cards in the hand is 17 or more.

00:00:45.850 --> 00:00:48.070
This example features a new function,

00:00:48.070 --> 00:00:52.189
"sum," and a new list method, "pop."

00:00:52.189 --> 00:00:53.789
Sum is pretty intuitive.

00:00:53.789 --> 00:00:57.024
It returns the sum of the elements in a list.

00:00:57.024 --> 00:00:59.960
Pop is the inverse of the append method.

00:00:59.960 --> 00:01:03.789
It removes the last element from a list and returns it.

00:01:03.789 --> 00:01:07.349
You can read more about this in the official documentation.

00:01:07.349 --> 00:01:10.399
In this line, we are computing the sum of

00:01:10.400 --> 00:01:15.205
the list hand and checking if that is less than or equal to 17.

00:01:15.204 --> 00:01:18.599
In this line, we are popping the last element from

00:01:18.599 --> 00:01:22.929
card_deck and appending that to the hand list.

00:01:22.930 --> 00:01:25.720
Let's talk about how this while loop works.

00:01:25.719 --> 00:01:30.519
The while keyword indicates that this is a while loop.

00:01:30.519 --> 00:01:32.289
Next is the condition.

00:01:32.290 --> 00:01:37.170
In this example, sum(hand) is less than or equal to 17.

00:01:37.170 --> 00:01:39.125
If this condition is true,

00:01:39.125 --> 00:01:41.650
the loop's body will be executed.

00:01:41.650 --> 00:01:44.145
Each time the loop's body runs,

00:01:44.144 --> 00:01:47.159
the condition is evaluated again.

00:01:47.159 --> 00:01:50.039
This process of checking the condition and then running

00:01:50.040 --> 00:01:54.050
the loop repeats until the expression becomes false.

00:01:54.049 --> 00:02:00.060
The indented body of the loop should modify at least one variable in the test expression.

00:02:00.060 --> 00:02:03.170
If the value of the test expression never changes,

00:02:03.170 --> 00:02:05.385
the result is an infinite loop.

00:02:05.385 --> 00:02:09.865
In this example, the loop's body appends numbers to the hand list,

00:02:09.865 --> 00:02:12.784
which increases the value of sum(hand).

00:02:12.784 --> 00:02:18.000
Eventually, the value of sum(hand) becomes large enough that the condition becomes false. 

